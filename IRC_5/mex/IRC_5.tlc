%% File : IRC_5.tlc
%% Created : Thu Apr 08 14:04:59 2021
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "IRC_5.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  IRC_5 "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "IRC_5_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void IRC_5_Start_wrapper_accel(void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3);
    SFB_EXTERN_C void IRC_5_Outputs_wrapper_accel(const real_T *triger,
			const real_T *position,
			const real_T *euler_ang,
			const real_T *quaternions,
			const real_T *joints,
			const real_T *j_speed,
			const real_T *cart_speed,
			real_T *curr_position,
			real_T *curr_angle,
			real_T *curr_quat,
			real_T *curr_joints,
			real_T *force,
			real_T *IRC5_time,
			real_T *testsig,
			void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3);
    SFB_EXTERN_C void IRC_5_Terminate_wrapper_accel(void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "IRC_5_accel_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void IRC_5_Start_wrapper(void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3);
    extern void IRC_5_Outputs_wrapper(const real_T *triger,
			const real_T *position,
			const real_T *euler_ang,
			const real_T *quaternions,
			const real_T *joints,
			const real_T *j_speed,
			const real_T *cart_speed,
			real_T *curr_position,
			real_T *curr_angle,
			real_T *curr_quat,
			real_T *curr_joints,
			real_T *force,
			real_T *IRC5_time,
			real_T *testsig,
			void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3);
    extern void IRC_5_Terminate_wrapper(void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3);
    void IRC_5_Start_wrapper_accel(void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3){
    IRC_5_Start_wrapper(pW,
			port_1, p_width0,
			port_2, p_width1,
			orient_switch, p_width2,
			tout, p_width3);
    }
    void IRC_5_Outputs_wrapper_accel(const real_T *triger,
			const real_T *position,
			const real_T *euler_ang,
			const real_T *quaternions,
			const real_T *joints,
			const real_T *j_speed,
			const real_T *cart_speed,
			real_T *curr_position,
			real_T *curr_angle,
			real_T *curr_quat,
			real_T *curr_joints,
			real_T *force,
			real_T *IRC5_time,
			real_T *testsig,
			void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3){
    IRC_5_Outputs_wrapper(triger,
			position,
			euler_ang,
			quaternions,
			joints,
			j_speed,
			cart_speed,
			curr_position,
			curr_angle,
			curr_quat,
			curr_joints,
			force,
			IRC5_time,
			testsig,
			pW,
			port_1, p_width0,
			port_2, p_width1,
			orient_switch, p_width2,
			tout, p_width3);
    }
    void IRC_5_Terminate_wrapper_accel(void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3){
    IRC_5_Terminate_wrapper(pW,
			port_1, p_width0,
			port_2, p_width1,
			orient_switch, p_width2,
			tout, p_width3);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs


    extern void IRC_5_Start_wrapper(void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3);

    extern void IRC_5_Outputs_wrapper(const real_T *triger,
			const real_T *position,
			const real_T *euler_ang,
			const real_T *quaternions,
			const real_T *joints,
			const real_T *j_speed,
			const real_T *cart_speed,
			real_T *curr_position,
			real_T *curr_angle,
			real_T *curr_quat,
			real_T *curr_joints,
			real_T *force,
			real_T *IRC5_time,
			real_T *testsig,
			void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3);

    extern void IRC_5_Terminate_wrapper(void **pW,
			const real_T *port_1, const int_T p_width0,
			const real_T *port_2, const int_T p_width1,
			const real_T *orient_switch, const int_T p_width2,
			const uint32_T *tout, const int_T p_width3);

  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    IRC_5_Start_wrapper_accel(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>);
  %else
    IRC_5_Start_wrapper(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>);
  %endif

%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu6 = LibBlockInputSignalAddr(6, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign py6 = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    IRC_5_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>);
  %else
    IRC_5_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>);
  %endif

  %%
%endfunction

%% Function: Terminate ========================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    IRC_5_Terminate_wrapper_accel(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>);
  %else
    IRC_5_Terminate_wrapper(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>);
  %endif

%endfunction

%% [EOF] IRC_5.tlc

